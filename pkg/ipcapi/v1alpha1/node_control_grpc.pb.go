// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: node_control.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeControllerServiceClient is the client API for NodeControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeControllerServiceClient interface {
	// Create a new link inside of the kernel by specifying its type and other attributes.
	CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*CreateLinkResponse, error)
	// Update a link status/attributes.
	UpdateLink(ctx context.Context, in *UpdateLinkRequest, opts ...grpc.CallOption) (*UpdateLinkResponse, error)
	// Remove a linnk inside of the kernel.
	DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteLinkResponse, error)
	// Get a link object returned from the kernel based on filters.
	GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error)
	// Returns all the links in the kernel.
	GetAllLinks(ctx context.Context, in *GetAllLinksRequest, opts ...grpc.CallOption) (*GetAllLinksResponse, error)
	// Add a static route inside of the kernel.
	CreateStaticRoute(ctx context.Context, in *CreateStaticRouteRequest, opts ...grpc.CallOption) (*CreateStaticRouteResponse, error)
	// Deletes a static route inside the kernel and returns the route object.
	DeleteStaticRoute(ctx context.Context, in *DeleteStaticRouteRequest, opts ...grpc.CallOption) (*DeleteStaticRouteResponse, error)
	// Updates a static route with new parameters.
	UpdateStaticRoute(ctx context.Context, in *UpdateStaticRouteRequest, opts ...grpc.CallOption) (*UpdateStaticRouteResponse, error)
	// Gets a route and returns an object based on the provided filter.
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error)
	// Gets all route objects within the kernel.
	GetAllRoutes(ctx context.Context, in *GetAllRoutesRequest, opts ...grpc.CallOption) (*GetAllRoutesResponse, error)
	// Gets a neighbor based on the specified
	GetNeighbor(ctx context.Context, in *GetNeighborRequest, opts ...grpc.CallOption) (*GetNeighborResponse, error)
	// Gets all the neighbors on this host.
	GetAllNeighbors(ctx context.Context, in *GetAllNeighborsRequest, opts ...grpc.CallOption) (*GetAllNeighborsResponse, error)
	// Creates a new neighbor with a certain MAC address and IP address.
	CreateNeighbor(ctx context.Context, in *CreateNeighborRequest, opts ...grpc.CallOption) (*CreateNeighborResponse, error)
	// Removes a neighbor from the ARP table on the host.
	DeleteNeighbor(ctx context.Context, in *DeleteNeighborRequest, opts ...grpc.CallOption) (*DeleteNeighborRequest, error)
	// Updates the state of a neighbor on the host.
	UpdateNeighbor(ctx context.Context, in *UpdateNeighborRequest, opts ...grpc.CallOption) (*UpdateNeighborResponse, error)
	// Gets an address on the host.
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error)
	// Gets all addresses that are located on the host.
	GetAllAddresses(ctx context.Context, in *GetAllAddressesRequest, opts ...grpc.CallOption) (*GetAllAddressesResponse, error)
	// Adds an address to a link on the host.
	CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressResponse, error)
	// Deletes an address assigned to a link on the host.
	DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*DeleteAddressResponse, error)
	// Updates addresses attached to a link on host.
	UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error)
	// Returns the status of a sysctl based on the sysctl procfs interface.
	GetSysctl(ctx context.Context, in *GetSysctlRequest, opts ...grpc.CallOption) (*GetSysctlResponse, error)
	// Sets the status of a sysctl based on the sysctl procfs interface.
	SetSysctl(ctx context.Context, in *SetSysctlRequest, opts ...grpc.CallOption) (*SetSysctlResponse, error)
}

type nodeControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeControllerServiceClient(cc grpc.ClientConnInterface) NodeControllerServiceClient {
	return &nodeControllerServiceClient{cc}
}

func (c *nodeControllerServiceClient) CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*CreateLinkResponse, error) {
	out := new(CreateLinkResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/CreateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) UpdateLink(ctx context.Context, in *UpdateLinkRequest, opts ...grpc.CallOption) (*UpdateLinkResponse, error) {
	out := new(UpdateLinkResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/UpdateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteLinkResponse, error) {
	out := new(DeleteLinkResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/DeleteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error) {
	out := new(GetLinkResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/GetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) GetAllLinks(ctx context.Context, in *GetAllLinksRequest, opts ...grpc.CallOption) (*GetAllLinksResponse, error) {
	out := new(GetAllLinksResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/GetAllLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) CreateStaticRoute(ctx context.Context, in *CreateStaticRouteRequest, opts ...grpc.CallOption) (*CreateStaticRouteResponse, error) {
	out := new(CreateStaticRouteResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/CreateStaticRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) DeleteStaticRoute(ctx context.Context, in *DeleteStaticRouteRequest, opts ...grpc.CallOption) (*DeleteStaticRouteResponse, error) {
	out := new(DeleteStaticRouteResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/DeleteStaticRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) UpdateStaticRoute(ctx context.Context, in *UpdateStaticRouteRequest, opts ...grpc.CallOption) (*UpdateStaticRouteResponse, error) {
	out := new(UpdateStaticRouteResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/UpdateStaticRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error) {
	out := new(GetRouteResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/GetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) GetAllRoutes(ctx context.Context, in *GetAllRoutesRequest, opts ...grpc.CallOption) (*GetAllRoutesResponse, error) {
	out := new(GetAllRoutesResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/GetAllRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) GetNeighbor(ctx context.Context, in *GetNeighborRequest, opts ...grpc.CallOption) (*GetNeighborResponse, error) {
	out := new(GetNeighborResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/GetNeighbor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) GetAllNeighbors(ctx context.Context, in *GetAllNeighborsRequest, opts ...grpc.CallOption) (*GetAllNeighborsResponse, error) {
	out := new(GetAllNeighborsResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/GetAllNeighbors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) CreateNeighbor(ctx context.Context, in *CreateNeighborRequest, opts ...grpc.CallOption) (*CreateNeighborResponse, error) {
	out := new(CreateNeighborResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/CreateNeighbor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) DeleteNeighbor(ctx context.Context, in *DeleteNeighborRequest, opts ...grpc.CallOption) (*DeleteNeighborRequest, error) {
	out := new(DeleteNeighborRequest)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/DeleteNeighbor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) UpdateNeighbor(ctx context.Context, in *UpdateNeighborRequest, opts ...grpc.CallOption) (*UpdateNeighborResponse, error) {
	out := new(UpdateNeighborResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/UpdateNeighbor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error) {
	out := new(GetAddressResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) GetAllAddresses(ctx context.Context, in *GetAllAddressesRequest, opts ...grpc.CallOption) (*GetAllAddressesResponse, error) {
	out := new(GetAllAddressesResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/GetAllAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressResponse, error) {
	out := new(CreateAddressResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*DeleteAddressResponse, error) {
	out := new(DeleteAddressResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/DeleteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error) {
	out := new(UpdateAddressResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/UpdateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) GetSysctl(ctx context.Context, in *GetSysctlRequest, opts ...grpc.CallOption) (*GetSysctlResponse, error) {
	out := new(GetSysctlResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/GetSysctl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerServiceClient) SetSysctl(ctx context.Context, in *SetSysctlRequest, opts ...grpc.CallOption) (*SetSysctlResponse, error) {
	out := new(SetSysctlResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeControllerService/SetSysctl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeControllerServiceServer is the server API for NodeControllerService service.
// All implementations must embed UnimplementedNodeControllerServiceServer
// for forward compatibility
type NodeControllerServiceServer interface {
	// Create a new link inside of the kernel by specifying its type and other attributes.
	CreateLink(context.Context, *CreateLinkRequest) (*CreateLinkResponse, error)
	// Update a link status/attributes.
	UpdateLink(context.Context, *UpdateLinkRequest) (*UpdateLinkResponse, error)
	// Remove a linnk inside of the kernel.
	DeleteLink(context.Context, *DeleteLinkRequest) (*DeleteLinkResponse, error)
	// Get a link object returned from the kernel based on filters.
	GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error)
	// Returns all the links in the kernel.
	GetAllLinks(context.Context, *GetAllLinksRequest) (*GetAllLinksResponse, error)
	// Add a static route inside of the kernel.
	CreateStaticRoute(context.Context, *CreateStaticRouteRequest) (*CreateStaticRouteResponse, error)
	// Deletes a static route inside the kernel and returns the route object.
	DeleteStaticRoute(context.Context, *DeleteStaticRouteRequest) (*DeleteStaticRouteResponse, error)
	// Updates a static route with new parameters.
	UpdateStaticRoute(context.Context, *UpdateStaticRouteRequest) (*UpdateStaticRouteResponse, error)
	// Gets a route and returns an object based on the provided filter.
	GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error)
	// Gets all route objects within the kernel.
	GetAllRoutes(context.Context, *GetAllRoutesRequest) (*GetAllRoutesResponse, error)
	// Gets a neighbor based on the specified
	GetNeighbor(context.Context, *GetNeighborRequest) (*GetNeighborResponse, error)
	// Gets all the neighbors on this host.
	GetAllNeighbors(context.Context, *GetAllNeighborsRequest) (*GetAllNeighborsResponse, error)
	// Creates a new neighbor with a certain MAC address and IP address.
	CreateNeighbor(context.Context, *CreateNeighborRequest) (*CreateNeighborResponse, error)
	// Removes a neighbor from the ARP table on the host.
	DeleteNeighbor(context.Context, *DeleteNeighborRequest) (*DeleteNeighborRequest, error)
	// Updates the state of a neighbor on the host.
	UpdateNeighbor(context.Context, *UpdateNeighborRequest) (*UpdateNeighborResponse, error)
	// Gets an address on the host.
	GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error)
	// Gets all addresses that are located on the host.
	GetAllAddresses(context.Context, *GetAllAddressesRequest) (*GetAllAddressesResponse, error)
	// Adds an address to a link on the host.
	CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressResponse, error)
	// Deletes an address assigned to a link on the host.
	DeleteAddress(context.Context, *DeleteAddressRequest) (*DeleteAddressResponse, error)
	// Updates addresses attached to a link on host.
	UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error)
	// Returns the status of a sysctl based on the sysctl procfs interface.
	GetSysctl(context.Context, *GetSysctlRequest) (*GetSysctlResponse, error)
	// Sets the status of a sysctl based on the sysctl procfs interface.
	SetSysctl(context.Context, *SetSysctlRequest) (*SetSysctlResponse, error)
	mustEmbedUnimplementedNodeControllerServiceServer()
}

// UnimplementedNodeControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeControllerServiceServer struct {
}

func (UnimplementedNodeControllerServiceServer) CreateLink(context.Context, *CreateLinkRequest) (*CreateLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedNodeControllerServiceServer) UpdateLink(context.Context, *UpdateLinkRequest) (*UpdateLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLink not implemented")
}
func (UnimplementedNodeControllerServiceServer) DeleteLink(context.Context, *DeleteLinkRequest) (*DeleteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLink not implemented")
}
func (UnimplementedNodeControllerServiceServer) GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedNodeControllerServiceServer) GetAllLinks(context.Context, *GetAllLinksRequest) (*GetAllLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLinks not implemented")
}
func (UnimplementedNodeControllerServiceServer) CreateStaticRoute(context.Context, *CreateStaticRouteRequest) (*CreateStaticRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaticRoute not implemented")
}
func (UnimplementedNodeControllerServiceServer) DeleteStaticRoute(context.Context, *DeleteStaticRouteRequest) (*DeleteStaticRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStaticRoute not implemented")
}
func (UnimplementedNodeControllerServiceServer) UpdateStaticRoute(context.Context, *UpdateStaticRouteRequest) (*UpdateStaticRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaticRoute not implemented")
}
func (UnimplementedNodeControllerServiceServer) GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedNodeControllerServiceServer) GetAllRoutes(context.Context, *GetAllRoutesRequest) (*GetAllRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoutes not implemented")
}
func (UnimplementedNodeControllerServiceServer) GetNeighbor(context.Context, *GetNeighborRequest) (*GetNeighborResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeighbor not implemented")
}
func (UnimplementedNodeControllerServiceServer) GetAllNeighbors(context.Context, *GetAllNeighborsRequest) (*GetAllNeighborsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNeighbors not implemented")
}
func (UnimplementedNodeControllerServiceServer) CreateNeighbor(context.Context, *CreateNeighborRequest) (*CreateNeighborResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNeighbor not implemented")
}
func (UnimplementedNodeControllerServiceServer) DeleteNeighbor(context.Context, *DeleteNeighborRequest) (*DeleteNeighborRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNeighbor not implemented")
}
func (UnimplementedNodeControllerServiceServer) UpdateNeighbor(context.Context, *UpdateNeighborRequest) (*UpdateNeighborResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNeighbor not implemented")
}
func (UnimplementedNodeControllerServiceServer) GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedNodeControllerServiceServer) GetAllAddresses(context.Context, *GetAllAddressesRequest) (*GetAllAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAddresses not implemented")
}
func (UnimplementedNodeControllerServiceServer) CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedNodeControllerServiceServer) DeleteAddress(context.Context, *DeleteAddressRequest) (*DeleteAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (UnimplementedNodeControllerServiceServer) UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedNodeControllerServiceServer) GetSysctl(context.Context, *GetSysctlRequest) (*GetSysctlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysctl not implemented")
}
func (UnimplementedNodeControllerServiceServer) SetSysctl(context.Context, *SetSysctlRequest) (*SetSysctlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSysctl not implemented")
}
func (UnimplementedNodeControllerServiceServer) mustEmbedUnimplementedNodeControllerServiceServer() {}

// UnsafeNodeControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeControllerServiceServer will
// result in compilation errors.
type UnsafeNodeControllerServiceServer interface {
	mustEmbedUnimplementedNodeControllerServiceServer()
}

func RegisterNodeControllerServiceServer(s grpc.ServiceRegistrar, srv NodeControllerServiceServer) {
	s.RegisterService(&NodeControllerService_ServiceDesc, srv)
}

func _NodeControllerService_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/CreateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).CreateLink(ctx, req.(*CreateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_UpdateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).UpdateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/UpdateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).UpdateLink(ctx, req.(*UpdateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_DeleteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/DeleteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).DeleteLink(ctx, req.(*DeleteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/GetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).GetLink(ctx, req.(*GetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_GetAllLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).GetAllLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/GetAllLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).GetAllLinks(ctx, req.(*GetAllLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_CreateStaticRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).CreateStaticRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/CreateStaticRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).CreateStaticRoute(ctx, req.(*CreateStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_DeleteStaticRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).DeleteStaticRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/DeleteStaticRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).DeleteStaticRoute(ctx, req.(*DeleteStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_UpdateStaticRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).UpdateStaticRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/UpdateStaticRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).UpdateStaticRoute(ctx, req.(*UpdateStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_GetAllRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).GetAllRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/GetAllRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).GetAllRoutes(ctx, req.(*GetAllRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_GetNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).GetNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/GetNeighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).GetNeighbor(ctx, req.(*GetNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_GetAllNeighbors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNeighborsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).GetAllNeighbors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/GetAllNeighbors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).GetAllNeighbors(ctx, req.(*GetAllNeighborsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_CreateNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).CreateNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/CreateNeighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).CreateNeighbor(ctx, req.(*CreateNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_DeleteNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).DeleteNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/DeleteNeighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).DeleteNeighbor(ctx, req.(*DeleteNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_UpdateNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).UpdateNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/UpdateNeighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).UpdateNeighbor(ctx, req.(*UpdateNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_GetAllAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).GetAllAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/GetAllAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).GetAllAddresses(ctx, req.(*GetAllAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).CreateAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/DeleteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).DeleteAddress(ctx, req.(*DeleteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/UpdateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).UpdateAddress(ctx, req.(*UpdateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_GetSysctl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysctlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).GetSysctl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/GetSysctl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).GetSysctl(ctx, req.(*GetSysctlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControllerService_SetSysctl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSysctlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServiceServer).SetSysctl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeControllerService/SetSysctl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServiceServer).SetSysctl(ctx, req.(*SetSysctlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeControllerService_ServiceDesc is the grpc.ServiceDesc for NodeControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.NodeControllerService",
	HandlerType: (*NodeControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLink",
			Handler:    _NodeControllerService_CreateLink_Handler,
		},
		{
			MethodName: "UpdateLink",
			Handler:    _NodeControllerService_UpdateLink_Handler,
		},
		{
			MethodName: "DeleteLink",
			Handler:    _NodeControllerService_DeleteLink_Handler,
		},
		{
			MethodName: "GetLink",
			Handler:    _NodeControllerService_GetLink_Handler,
		},
		{
			MethodName: "GetAllLinks",
			Handler:    _NodeControllerService_GetAllLinks_Handler,
		},
		{
			MethodName: "CreateStaticRoute",
			Handler:    _NodeControllerService_CreateStaticRoute_Handler,
		},
		{
			MethodName: "DeleteStaticRoute",
			Handler:    _NodeControllerService_DeleteStaticRoute_Handler,
		},
		{
			MethodName: "UpdateStaticRoute",
			Handler:    _NodeControllerService_UpdateStaticRoute_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _NodeControllerService_GetRoute_Handler,
		},
		{
			MethodName: "GetAllRoutes",
			Handler:    _NodeControllerService_GetAllRoutes_Handler,
		},
		{
			MethodName: "GetNeighbor",
			Handler:    _NodeControllerService_GetNeighbor_Handler,
		},
		{
			MethodName: "GetAllNeighbors",
			Handler:    _NodeControllerService_GetAllNeighbors_Handler,
		},
		{
			MethodName: "CreateNeighbor",
			Handler:    _NodeControllerService_CreateNeighbor_Handler,
		},
		{
			MethodName: "DeleteNeighbor",
			Handler:    _NodeControllerService_DeleteNeighbor_Handler,
		},
		{
			MethodName: "UpdateNeighbor",
			Handler:    _NodeControllerService_UpdateNeighbor_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _NodeControllerService_GetAddress_Handler,
		},
		{
			MethodName: "GetAllAddresses",
			Handler:    _NodeControllerService_GetAllAddresses_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _NodeControllerService_CreateAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _NodeControllerService_DeleteAddress_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _NodeControllerService_UpdateAddress_Handler,
		},
		{
			MethodName: "GetSysctl",
			Handler:    _NodeControllerService_GetSysctl_Handler,
		},
		{
			MethodName: "SetSysctl",
			Handler:    _NodeControllerService_SetSysctl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node_control.proto",
}

// NodeFirewallControllerServiceClient is the client API for NodeFirewallControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeFirewallControllerServiceClient interface {
	// Get a table that contains chains and rules. Returns table based on name.
	GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error)
	// Returns all netfilter tables that are configured on the host.
	GetAllTables(ctx context.Context, in *GetAllTablesRequest, opts ...grpc.CallOption) (*GetAllTablesResponse, error)
	// Removes a table from the host based on name. Returns the table that was deleted.
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error)
	// Creates a table based on name. Returns if there was an error with creation.
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	// Updates a table with with a new table object.
	UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*UpdateTableResponse, error)
	// Returns a chain object based on filters.
	GetChain(ctx context.Context, in *GetChainRequest, opts ...grpc.CallOption) (*GetChainResponse, error)
	// Returns allchains that are loaded on the host.
	GetAllChains(ctx context.Context, in *GetAllChainsRequest, opts ...grpc.CallOption) (*GetAllChainsResponse, error)
	// Removes a chain based on name. Returns the deleted chain object.
	DeleteChain(ctx context.Context, in *DeleteChainRequest, opts ...grpc.CallOption) (*DeleteChainResponse, error)
	// Creates a new chain on the host based on the provided object.
	CreateChain(ctx context.Context, in *CreateChainRequest, opts ...grpc.CallOption) (*CreateChainResponse, error)
	// Updates a chain on the host with the provided object.
	UpdateChain(ctx context.Context, in *UpdateChainRequest, opts ...grpc.CallOption) (*UpdateChainRequest, error)
	// Returns a rule object based on specified filters.
	GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*GetRuleResponse, error)
	// Returns all rules loaded on the host.
	GetAllRules(ctx context.Context, in *GetAllRulesRequest, opts ...grpc.CallOption) (*GetAllRulesResponse, error)
	// Deletes a rule from the host, and returns the rule that was removed.
	DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error)
	// Creates a new rule based on the provided object.
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error)
	// Updates a new rule on the host via the provided object.
	UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error)
}

type nodeFirewallControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeFirewallControllerServiceClient(cc grpc.ClientConnInterface) NodeFirewallControllerServiceClient {
	return &nodeFirewallControllerServiceClient{cc}
}

func (c *nodeFirewallControllerServiceClient) GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error) {
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/GetTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) GetAllTables(ctx context.Context, in *GetAllTablesRequest, opts ...grpc.CallOption) (*GetAllTablesResponse, error) {
	out := new(GetAllTablesResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/GetAllTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error) {
	out := new(DeleteTableResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*UpdateTableResponse, error) {
	out := new(UpdateTableResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/UpdateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) GetChain(ctx context.Context, in *GetChainRequest, opts ...grpc.CallOption) (*GetChainResponse, error) {
	out := new(GetChainResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/GetChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) GetAllChains(ctx context.Context, in *GetAllChainsRequest, opts ...grpc.CallOption) (*GetAllChainsResponse, error) {
	out := new(GetAllChainsResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/GetAllChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) DeleteChain(ctx context.Context, in *DeleteChainRequest, opts ...grpc.CallOption) (*DeleteChainResponse, error) {
	out := new(DeleteChainResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/DeleteChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) CreateChain(ctx context.Context, in *CreateChainRequest, opts ...grpc.CallOption) (*CreateChainResponse, error) {
	out := new(CreateChainResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/CreateChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) UpdateChain(ctx context.Context, in *UpdateChainRequest, opts ...grpc.CallOption) (*UpdateChainRequest, error) {
	out := new(UpdateChainRequest)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/UpdateChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*GetRuleResponse, error) {
	out := new(GetRuleResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/GetRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) GetAllRules(ctx context.Context, in *GetAllRulesRequest, opts ...grpc.CallOption) (*GetAllRulesResponse, error) {
	out := new(GetAllRulesResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/GetAllRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error) {
	out := new(DeleteRuleResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error) {
	out := new(CreateRuleResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeFirewallControllerServiceClient) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error) {
	out := new(UpdateRuleResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeFirewallControllerService/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeFirewallControllerServiceServer is the server API for NodeFirewallControllerService service.
// All implementations must embed UnimplementedNodeFirewallControllerServiceServer
// for forward compatibility
type NodeFirewallControllerServiceServer interface {
	// Get a table that contains chains and rules. Returns table based on name.
	GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error)
	// Returns all netfilter tables that are configured on the host.
	GetAllTables(context.Context, *GetAllTablesRequest) (*GetAllTablesResponse, error)
	// Removes a table from the host based on name. Returns the table that was deleted.
	DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error)
	// Creates a table based on name. Returns if there was an error with creation.
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	// Updates a table with with a new table object.
	UpdateTable(context.Context, *UpdateTableRequest) (*UpdateTableResponse, error)
	// Returns a chain object based on filters.
	GetChain(context.Context, *GetChainRequest) (*GetChainResponse, error)
	// Returns allchains that are loaded on the host.
	GetAllChains(context.Context, *GetAllChainsRequest) (*GetAllChainsResponse, error)
	// Removes a chain based on name. Returns the deleted chain object.
	DeleteChain(context.Context, *DeleteChainRequest) (*DeleteChainResponse, error)
	// Creates a new chain on the host based on the provided object.
	CreateChain(context.Context, *CreateChainRequest) (*CreateChainResponse, error)
	// Updates a chain on the host with the provided object.
	UpdateChain(context.Context, *UpdateChainRequest) (*UpdateChainRequest, error)
	// Returns a rule object based on specified filters.
	GetRule(context.Context, *GetRuleRequest) (*GetRuleResponse, error)
	// Returns all rules loaded on the host.
	GetAllRules(context.Context, *GetAllRulesRequest) (*GetAllRulesResponse, error)
	// Deletes a rule from the host, and returns the rule that was removed.
	DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error)
	// Creates a new rule based on the provided object.
	CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error)
	// Updates a new rule on the host via the provided object.
	UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error)
	mustEmbedUnimplementedNodeFirewallControllerServiceServer()
}

// UnimplementedNodeFirewallControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeFirewallControllerServiceServer struct {
}

func (UnimplementedNodeFirewallControllerServiceServer) GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) GetAllTables(context.Context, *GetAllTablesRequest) (*GetAllTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTables not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) UpdateTable(context.Context, *UpdateTableRequest) (*UpdateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTable not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) GetChain(context.Context, *GetChainRequest) (*GetChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChain not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) GetAllChains(context.Context, *GetAllChainsRequest) (*GetAllChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChains not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) DeleteChain(context.Context, *DeleteChainRequest) (*DeleteChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChain not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) CreateChain(context.Context, *CreateChainRequest) (*CreateChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChain not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) UpdateChain(context.Context, *UpdateChainRequest) (*UpdateChainRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChain not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) GetRule(context.Context, *GetRuleRequest) (*GetRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) GetAllRules(context.Context, *GetAllRulesRequest) (*GetAllRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRules not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedNodeFirewallControllerServiceServer) mustEmbedUnimplementedNodeFirewallControllerServiceServer() {
}

// UnsafeNodeFirewallControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeFirewallControllerServiceServer will
// result in compilation errors.
type UnsafeNodeFirewallControllerServiceServer interface {
	mustEmbedUnimplementedNodeFirewallControllerServiceServer()
}

func RegisterNodeFirewallControllerServiceServer(s grpc.ServiceRegistrar, srv NodeFirewallControllerServiceServer) {
	s.RegisterService(&NodeFirewallControllerService_ServiceDesc, srv)
}

func _NodeFirewallControllerService_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/GetTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).GetTable(ctx, req.(*GetTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_GetAllTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).GetAllTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/GetAllTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).GetAllTables(ctx, req.(*GetAllTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_UpdateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).UpdateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/UpdateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).UpdateTable(ctx, req.(*UpdateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_GetChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).GetChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/GetChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).GetChain(ctx, req.(*GetChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_GetAllChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).GetAllChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/GetAllChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).GetAllChains(ctx, req.(*GetAllChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_DeleteChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).DeleteChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/DeleteChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).DeleteChain(ctx, req.(*DeleteChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_CreateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).CreateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/CreateChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).CreateChain(ctx, req.(*CreateChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_UpdateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).UpdateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/UpdateChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).UpdateChain(ctx, req.(*UpdateChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/GetRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).GetRule(ctx, req.(*GetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_GetAllRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).GetAllRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/GetAllRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).GetAllRules(ctx, req.(*GetAllRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/DeleteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).DeleteRule(ctx, req.(*DeleteRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeFirewallControllerService_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeFirewallControllerServiceServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeFirewallControllerService/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeFirewallControllerServiceServer).UpdateRule(ctx, req.(*UpdateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeFirewallControllerService_ServiceDesc is the grpc.ServiceDesc for NodeFirewallControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeFirewallControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.NodeFirewallControllerService",
	HandlerType: (*NodeFirewallControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTable",
			Handler:    _NodeFirewallControllerService_GetTable_Handler,
		},
		{
			MethodName: "GetAllTables",
			Handler:    _NodeFirewallControllerService_GetAllTables_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _NodeFirewallControllerService_DeleteTable_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _NodeFirewallControllerService_CreateTable_Handler,
		},
		{
			MethodName: "UpdateTable",
			Handler:    _NodeFirewallControllerService_UpdateTable_Handler,
		},
		{
			MethodName: "GetChain",
			Handler:    _NodeFirewallControllerService_GetChain_Handler,
		},
		{
			MethodName: "GetAllChains",
			Handler:    _NodeFirewallControllerService_GetAllChains_Handler,
		},
		{
			MethodName: "DeleteChain",
			Handler:    _NodeFirewallControllerService_DeleteChain_Handler,
		},
		{
			MethodName: "CreateChain",
			Handler:    _NodeFirewallControllerService_CreateChain_Handler,
		},
		{
			MethodName: "UpdateChain",
			Handler:    _NodeFirewallControllerService_UpdateChain_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _NodeFirewallControllerService_GetRule_Handler,
		},
		{
			MethodName: "GetAllRules",
			Handler:    _NodeFirewallControllerService_GetAllRules_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _NodeFirewallControllerService_DeleteRule_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _NodeFirewallControllerService_CreateRule_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _NodeFirewallControllerService_UpdateRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node_control.proto",
}

// NodeVPNControllerServiceClient is the client API for NodeVPNControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeVPNControllerServiceClient interface {
	GetL2TPTunnel(ctx context.Context, in *GetL2TPTunnelRequest, opts ...grpc.CallOption) (*GetL2TPTunnelResponse, error)
	GetAllL2TPTunnels(ctx context.Context, in *GetAllL2TPTunnelsRequest, opts ...grpc.CallOption) (*GetAllL2TPTunnelsResponse, error)
	// Deletes an L2TP tunnel on the host.
	DeleteL2TPTunnel(ctx context.Context, in *DeleteL2TPTunnelRequest, opts ...grpc.CallOption) (*DeleteL2TPTunnelResponse, error)
	// Creates an L2TP tunnel on the host.
	CreateL2TPTunnel(ctx context.Context, in *CreateL2TPTunnelRequest, opts ...grpc.CallOption) (*CreateL2TPTunnelResponse, error)
	UpdateL2TPTunnel(ctx context.Context, in *UpdateL2TPTunnelRequest, opts ...grpc.CallOption) (*UpdateL2TPTunnelResponse, error)
	GetIPSecTunnel(ctx context.Context, in *GetIPSecTunnelRequest, opts ...grpc.CallOption) (*GetIPSecTunnelResponse, error)
	GetAllIPSecTunnels(ctx context.Context, in *GetAllIPSecTunnelsRequest, opts ...grpc.CallOption) (*GetAllIPSecTunnelsResponse, error)
	// Deletes an IPSec tunnel on the host.
	DeleteIPSecTunnel(ctx context.Context, in *DeleteIPSecTunnelRequest, opts ...grpc.CallOption) (*DeleteIPSecTunnelResponse, error)
	// Creates an IPSec tunnel on the host.
	CreateIPSecTunnel(ctx context.Context, in *CreateIPSecTunnelRequest, opts ...grpc.CallOption) (*CreateIPSecTunnelResponse, error)
	UpdateIPSecTunnel(ctx context.Context, in *UpdateIPSecTunnelRequest, opts ...grpc.CallOption) (*UpdateIPSecTunnelResponse, error)
	GetWireguardTunnel(ctx context.Context, in *GetWireguardTunnelRequest, opts ...grpc.CallOption) (*GetWireguardTunnelResponse, error)
	GetAllWireguardTunnels(ctx context.Context, in *GetAllWireguardTunnelsRequest, opts ...grpc.CallOption) (*GetAllWireguardTunnelsResponse, error)
	// Deletes an Wireguard tunnel on the host.
	DeleteWireguardTunnel(ctx context.Context, in *DeleteWireguardTunnelRequest, opts ...grpc.CallOption) (*DeleteWireguardTunnelResponse, error)
	// Creates an Wireguard tunnel on the host.
	CreateWireguardTunnel(ctx context.Context, in *CreateWireguardTunnelRequest, opts ...grpc.CallOption) (*CreateWireguardTunnelResponse, error)
	UpdateWireguardTunnel(ctx context.Context, in *UpdateWireguardTunnelRequest, opts ...grpc.CallOption) (*UpdateWireguardTunnelResponse, error)
}

type nodeVPNControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeVPNControllerServiceClient(cc grpc.ClientConnInterface) NodeVPNControllerServiceClient {
	return &nodeVPNControllerServiceClient{cc}
}

func (c *nodeVPNControllerServiceClient) GetL2TPTunnel(ctx context.Context, in *GetL2TPTunnelRequest, opts ...grpc.CallOption) (*GetL2TPTunnelResponse, error) {
	out := new(GetL2TPTunnelResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/GetL2TPTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) GetAllL2TPTunnels(ctx context.Context, in *GetAllL2TPTunnelsRequest, opts ...grpc.CallOption) (*GetAllL2TPTunnelsResponse, error) {
	out := new(GetAllL2TPTunnelsResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/GetAllL2TPTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) DeleteL2TPTunnel(ctx context.Context, in *DeleteL2TPTunnelRequest, opts ...grpc.CallOption) (*DeleteL2TPTunnelResponse, error) {
	out := new(DeleteL2TPTunnelResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/DeleteL2TPTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) CreateL2TPTunnel(ctx context.Context, in *CreateL2TPTunnelRequest, opts ...grpc.CallOption) (*CreateL2TPTunnelResponse, error) {
	out := new(CreateL2TPTunnelResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/CreateL2TPTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) UpdateL2TPTunnel(ctx context.Context, in *UpdateL2TPTunnelRequest, opts ...grpc.CallOption) (*UpdateL2TPTunnelResponse, error) {
	out := new(UpdateL2TPTunnelResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/UpdateL2TPTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) GetIPSecTunnel(ctx context.Context, in *GetIPSecTunnelRequest, opts ...grpc.CallOption) (*GetIPSecTunnelResponse, error) {
	out := new(GetIPSecTunnelResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/GetIPSecTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) GetAllIPSecTunnels(ctx context.Context, in *GetAllIPSecTunnelsRequest, opts ...grpc.CallOption) (*GetAllIPSecTunnelsResponse, error) {
	out := new(GetAllIPSecTunnelsResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/GetAllIPSecTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) DeleteIPSecTunnel(ctx context.Context, in *DeleteIPSecTunnelRequest, opts ...grpc.CallOption) (*DeleteIPSecTunnelResponse, error) {
	out := new(DeleteIPSecTunnelResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/DeleteIPSecTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) CreateIPSecTunnel(ctx context.Context, in *CreateIPSecTunnelRequest, opts ...grpc.CallOption) (*CreateIPSecTunnelResponse, error) {
	out := new(CreateIPSecTunnelResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/CreateIPSecTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) UpdateIPSecTunnel(ctx context.Context, in *UpdateIPSecTunnelRequest, opts ...grpc.CallOption) (*UpdateIPSecTunnelResponse, error) {
	out := new(UpdateIPSecTunnelResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/UpdateIPSecTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) GetWireguardTunnel(ctx context.Context, in *GetWireguardTunnelRequest, opts ...grpc.CallOption) (*GetWireguardTunnelResponse, error) {
	out := new(GetWireguardTunnelResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/GetWireguardTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) GetAllWireguardTunnels(ctx context.Context, in *GetAllWireguardTunnelsRequest, opts ...grpc.CallOption) (*GetAllWireguardTunnelsResponse, error) {
	out := new(GetAllWireguardTunnelsResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/GetAllWireguardTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) DeleteWireguardTunnel(ctx context.Context, in *DeleteWireguardTunnelRequest, opts ...grpc.CallOption) (*DeleteWireguardTunnelResponse, error) {
	out := new(DeleteWireguardTunnelResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/DeleteWireguardTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) CreateWireguardTunnel(ctx context.Context, in *CreateWireguardTunnelRequest, opts ...grpc.CallOption) (*CreateWireguardTunnelResponse, error) {
	out := new(CreateWireguardTunnelResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/CreateWireguardTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVPNControllerServiceClient) UpdateWireguardTunnel(ctx context.Context, in *UpdateWireguardTunnelRequest, opts ...grpc.CallOption) (*UpdateWireguardTunnelResponse, error) {
	out := new(UpdateWireguardTunnelResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.NodeVPNControllerService/UpdateWireguardTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeVPNControllerServiceServer is the server API for NodeVPNControllerService service.
// All implementations must embed UnimplementedNodeVPNControllerServiceServer
// for forward compatibility
type NodeVPNControllerServiceServer interface {
	GetL2TPTunnel(context.Context, *GetL2TPTunnelRequest) (*GetL2TPTunnelResponse, error)
	GetAllL2TPTunnels(context.Context, *GetAllL2TPTunnelsRequest) (*GetAllL2TPTunnelsResponse, error)
	// Deletes an L2TP tunnel on the host.
	DeleteL2TPTunnel(context.Context, *DeleteL2TPTunnelRequest) (*DeleteL2TPTunnelResponse, error)
	// Creates an L2TP tunnel on the host.
	CreateL2TPTunnel(context.Context, *CreateL2TPTunnelRequest) (*CreateL2TPTunnelResponse, error)
	UpdateL2TPTunnel(context.Context, *UpdateL2TPTunnelRequest) (*UpdateL2TPTunnelResponse, error)
	GetIPSecTunnel(context.Context, *GetIPSecTunnelRequest) (*GetIPSecTunnelResponse, error)
	GetAllIPSecTunnels(context.Context, *GetAllIPSecTunnelsRequest) (*GetAllIPSecTunnelsResponse, error)
	// Deletes an IPSec tunnel on the host.
	DeleteIPSecTunnel(context.Context, *DeleteIPSecTunnelRequest) (*DeleteIPSecTunnelResponse, error)
	// Creates an IPSec tunnel on the host.
	CreateIPSecTunnel(context.Context, *CreateIPSecTunnelRequest) (*CreateIPSecTunnelResponse, error)
	UpdateIPSecTunnel(context.Context, *UpdateIPSecTunnelRequest) (*UpdateIPSecTunnelResponse, error)
	GetWireguardTunnel(context.Context, *GetWireguardTunnelRequest) (*GetWireguardTunnelResponse, error)
	GetAllWireguardTunnels(context.Context, *GetAllWireguardTunnelsRequest) (*GetAllWireguardTunnelsResponse, error)
	// Deletes an Wireguard tunnel on the host.
	DeleteWireguardTunnel(context.Context, *DeleteWireguardTunnelRequest) (*DeleteWireguardTunnelResponse, error)
	// Creates an Wireguard tunnel on the host.
	CreateWireguardTunnel(context.Context, *CreateWireguardTunnelRequest) (*CreateWireguardTunnelResponse, error)
	UpdateWireguardTunnel(context.Context, *UpdateWireguardTunnelRequest) (*UpdateWireguardTunnelResponse, error)
	mustEmbedUnimplementedNodeVPNControllerServiceServer()
}

// UnimplementedNodeVPNControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeVPNControllerServiceServer struct {
}

func (UnimplementedNodeVPNControllerServiceServer) GetL2TPTunnel(context.Context, *GetL2TPTunnelRequest) (*GetL2TPTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetL2TPTunnel not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) GetAllL2TPTunnels(context.Context, *GetAllL2TPTunnelsRequest) (*GetAllL2TPTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllL2TPTunnels not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) DeleteL2TPTunnel(context.Context, *DeleteL2TPTunnelRequest) (*DeleteL2TPTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteL2TPTunnel not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) CreateL2TPTunnel(context.Context, *CreateL2TPTunnelRequest) (*CreateL2TPTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateL2TPTunnel not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) UpdateL2TPTunnel(context.Context, *UpdateL2TPTunnelRequest) (*UpdateL2TPTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateL2TPTunnel not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) GetIPSecTunnel(context.Context, *GetIPSecTunnelRequest) (*GetIPSecTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPSecTunnel not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) GetAllIPSecTunnels(context.Context, *GetAllIPSecTunnelsRequest) (*GetAllIPSecTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllIPSecTunnels not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) DeleteIPSecTunnel(context.Context, *DeleteIPSecTunnelRequest) (*DeleteIPSecTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIPSecTunnel not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) CreateIPSecTunnel(context.Context, *CreateIPSecTunnelRequest) (*CreateIPSecTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIPSecTunnel not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) UpdateIPSecTunnel(context.Context, *UpdateIPSecTunnelRequest) (*UpdateIPSecTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIPSecTunnel not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) GetWireguardTunnel(context.Context, *GetWireguardTunnelRequest) (*GetWireguardTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWireguardTunnel not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) GetAllWireguardTunnels(context.Context, *GetAllWireguardTunnelsRequest) (*GetAllWireguardTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWireguardTunnels not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) DeleteWireguardTunnel(context.Context, *DeleteWireguardTunnelRequest) (*DeleteWireguardTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWireguardTunnel not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) CreateWireguardTunnel(context.Context, *CreateWireguardTunnelRequest) (*CreateWireguardTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWireguardTunnel not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) UpdateWireguardTunnel(context.Context, *UpdateWireguardTunnelRequest) (*UpdateWireguardTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWireguardTunnel not implemented")
}
func (UnimplementedNodeVPNControllerServiceServer) mustEmbedUnimplementedNodeVPNControllerServiceServer() {
}

// UnsafeNodeVPNControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeVPNControllerServiceServer will
// result in compilation errors.
type UnsafeNodeVPNControllerServiceServer interface {
	mustEmbedUnimplementedNodeVPNControllerServiceServer()
}

func RegisterNodeVPNControllerServiceServer(s grpc.ServiceRegistrar, srv NodeVPNControllerServiceServer) {
	s.RegisterService(&NodeVPNControllerService_ServiceDesc, srv)
}

func _NodeVPNControllerService_GetL2TPTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetL2TPTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).GetL2TPTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/GetL2TPTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).GetL2TPTunnel(ctx, req.(*GetL2TPTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_GetAllL2TPTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllL2TPTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).GetAllL2TPTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/GetAllL2TPTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).GetAllL2TPTunnels(ctx, req.(*GetAllL2TPTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_DeleteL2TPTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteL2TPTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).DeleteL2TPTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/DeleteL2TPTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).DeleteL2TPTunnel(ctx, req.(*DeleteL2TPTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_CreateL2TPTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateL2TPTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).CreateL2TPTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/CreateL2TPTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).CreateL2TPTunnel(ctx, req.(*CreateL2TPTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_UpdateL2TPTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateL2TPTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).UpdateL2TPTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/UpdateL2TPTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).UpdateL2TPTunnel(ctx, req.(*UpdateL2TPTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_GetIPSecTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPSecTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).GetIPSecTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/GetIPSecTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).GetIPSecTunnel(ctx, req.(*GetIPSecTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_GetAllIPSecTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllIPSecTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).GetAllIPSecTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/GetAllIPSecTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).GetAllIPSecTunnels(ctx, req.(*GetAllIPSecTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_DeleteIPSecTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIPSecTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).DeleteIPSecTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/DeleteIPSecTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).DeleteIPSecTunnel(ctx, req.(*DeleteIPSecTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_CreateIPSecTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIPSecTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).CreateIPSecTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/CreateIPSecTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).CreateIPSecTunnel(ctx, req.(*CreateIPSecTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_UpdateIPSecTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIPSecTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).UpdateIPSecTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/UpdateIPSecTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).UpdateIPSecTunnel(ctx, req.(*UpdateIPSecTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_GetWireguardTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWireguardTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).GetWireguardTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/GetWireguardTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).GetWireguardTunnel(ctx, req.(*GetWireguardTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_GetAllWireguardTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWireguardTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).GetAllWireguardTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/GetAllWireguardTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).GetAllWireguardTunnels(ctx, req.(*GetAllWireguardTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_DeleteWireguardTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWireguardTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).DeleteWireguardTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/DeleteWireguardTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).DeleteWireguardTunnel(ctx, req.(*DeleteWireguardTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_CreateWireguardTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWireguardTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).CreateWireguardTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/CreateWireguardTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).CreateWireguardTunnel(ctx, req.(*CreateWireguardTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeVPNControllerService_UpdateWireguardTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWireguardTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeVPNControllerServiceServer).UpdateWireguardTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.NodeVPNControllerService/UpdateWireguardTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeVPNControllerServiceServer).UpdateWireguardTunnel(ctx, req.(*UpdateWireguardTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeVPNControllerService_ServiceDesc is the grpc.ServiceDesc for NodeVPNControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeVPNControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.NodeVPNControllerService",
	HandlerType: (*NodeVPNControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetL2TPTunnel",
			Handler:    _NodeVPNControllerService_GetL2TPTunnel_Handler,
		},
		{
			MethodName: "GetAllL2TPTunnels",
			Handler:    _NodeVPNControllerService_GetAllL2TPTunnels_Handler,
		},
		{
			MethodName: "DeleteL2TPTunnel",
			Handler:    _NodeVPNControllerService_DeleteL2TPTunnel_Handler,
		},
		{
			MethodName: "CreateL2TPTunnel",
			Handler:    _NodeVPNControllerService_CreateL2TPTunnel_Handler,
		},
		{
			MethodName: "UpdateL2TPTunnel",
			Handler:    _NodeVPNControllerService_UpdateL2TPTunnel_Handler,
		},
		{
			MethodName: "GetIPSecTunnel",
			Handler:    _NodeVPNControllerService_GetIPSecTunnel_Handler,
		},
		{
			MethodName: "GetAllIPSecTunnels",
			Handler:    _NodeVPNControllerService_GetAllIPSecTunnels_Handler,
		},
		{
			MethodName: "DeleteIPSecTunnel",
			Handler:    _NodeVPNControllerService_DeleteIPSecTunnel_Handler,
		},
		{
			MethodName: "CreateIPSecTunnel",
			Handler:    _NodeVPNControllerService_CreateIPSecTunnel_Handler,
		},
		{
			MethodName: "UpdateIPSecTunnel",
			Handler:    _NodeVPNControllerService_UpdateIPSecTunnel_Handler,
		},
		{
			MethodName: "GetWireguardTunnel",
			Handler:    _NodeVPNControllerService_GetWireguardTunnel_Handler,
		},
		{
			MethodName: "GetAllWireguardTunnels",
			Handler:    _NodeVPNControllerService_GetAllWireguardTunnels_Handler,
		},
		{
			MethodName: "DeleteWireguardTunnel",
			Handler:    _NodeVPNControllerService_DeleteWireguardTunnel_Handler,
		},
		{
			MethodName: "CreateWireguardTunnel",
			Handler:    _NodeVPNControllerService_CreateWireguardTunnel_Handler,
		},
		{
			MethodName: "UpdateWireguardTunnel",
			Handler:    _NodeVPNControllerService_UpdateWireguardTunnel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node_control.proto",
}
