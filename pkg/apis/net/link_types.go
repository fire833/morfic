/*
*	Copyright (C) 2022  Kendall Tauser
*
*	This program is free software; you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by
*	the Free Software Foundation; either version 2 of the License, or
*	(at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License along
*	with this program; if not, write to the Free Software Foundation, Inc.,
*	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package net

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen=true
// +genclient
// +genclient:nonNamespaced
// LinkList represents a list of Link objects.
type LinkList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`

	// Standard object metadata.
	// Utilizes the Kubernetes metadata object spec for now.
	metav1.ObjectMeta `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// Items specifies the array of links.
	Items []Link `json:"items" yaml:"items"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen=true
// +genclient
// +genclient:nonNamespaced
// Link represents a link that exists on the host.
type Link struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`

	// Standard object metadata.
	// Utilizes the Kubernetes metadata object spec for now.
	metav1.ObjectMeta `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// Spec is the desired spec of this link object.
	Spec LinkSpec `json:"spec" yaml:"spec"`

	// Status is the current state of this link on the host.
	//
	// Should not be filled out by the user, will be filled/managed
	// by the server. Can be read by user at runtime.
	Status LinkStatus `json:"status" yaml:"status"`
}

// LinkSpec represents the desired spec for a link.
type LinkSpec struct {
	// Name specified the string name of this link.
	Name string `json:"name" yaml:"name"`

	// Type specifies the type that this link
	Type string `json:"type" yaml:"type"`

	// HWAddress specifies the hardware address for this link address.
	HWAddress HardwareAddress `json:"hardwareAddress" yaml:"hardwareAddress"`
}

// LinkStatus represents the status of the link.
type LinkStatus struct {
	// IsUp represents whether the link is up on the host or not.
	IsUp bool `json:"isUp" yaml:"isUp"`

	// Driver specifies what device driver created/maintains this link.
	Driver string `json:"driver" yaml:"driver"`
}

// NetNamespaceSpec represents the desired/actual status for
// a net namespace on the host.
//
// This object is usually generated by the server, should not
// be created by the user.
type NetNamespaceSpec struct {
	// Id specifies the ID of the net namespace in the kernel.
	//
	// Defaults to being 'host', which specifies the host net namespace/
	//the namespace the control plane is running in.
	Id string `json:"id" yaml:"id"`
}

type HardwareAddress struct {
}
