/*
*	Copyright (C) 2022  Kendall Tauser
*
*	This program is free software; you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by
*	the Free Software Foundation; either version 2 of the License, or
*	(at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License along
*	with this program; if not, write to the Free Software Foundation, Inc.,
*	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

// Code generated by lister-gen. DO NOT EDIT.

package interfaces

import (
	interfaces "github.com/fire833/morfic/pkg/apis/interfaces"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LinkLister helps list Links.
// All objects returned here must be treated as read-only.
type LinkLister interface {
	// List lists all Links in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*interfaces.Link, err error)
	// Links returns an object that can list and get Links.
	Links(namespace string) LinkNamespaceLister
	LinkListerExpansion
}

// linkLister implements the LinkLister interface.
type linkLister struct {
	indexer cache.Indexer
}

// NewLinkLister returns a new LinkLister.
func NewLinkLister(indexer cache.Indexer) LinkLister {
	return &linkLister{indexer: indexer}
}

// List lists all Links in the indexer.
func (s *linkLister) List(selector labels.Selector) (ret []*interfaces.Link, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*interfaces.Link))
	})
	return ret, err
}

// Links returns an object that can list and get Links.
func (s *linkLister) Links(namespace string) LinkNamespaceLister {
	return linkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LinkNamespaceLister helps list and get Links.
// All objects returned here must be treated as read-only.
type LinkNamespaceLister interface {
	// List lists all Links in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*interfaces.Link, err error)
	// Get retrieves the Link from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*interfaces.Link, error)
	LinkNamespaceListerExpansion
}

// linkNamespaceLister implements the LinkNamespaceLister
// interface.
type linkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Links in the indexer for a given namespace.
func (s linkNamespaceLister) List(selector labels.Selector) (ret []*interfaces.Link, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*interfaces.Link))
	})
	return ret, err
}

// Get retrieves the Link from the indexer for a given namespace and name.
func (s linkNamespaceLister) Get(name string) (*interfaces.Link, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(interfaces.Resource("link"), name)
	}
	return obj.(*interfaces.Link), nil
}
