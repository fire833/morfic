/*
*	Copyright (C) 2022  Kendall Tauser
*
*	This program is free software; you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by
*	the Free Software Foundation; either version 2 of the License, or
*	(at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License along
*	with this program; if not, write to the Free Software Foundation, Inc.,
*	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

// Code generated by informer-gen. DO NOT EDIT.

package vpn

import (
	"context"
	internalinterfaces "pkg/client/informers/externalversions/internalinterfaces"
	time "time"

	apisvpn "github.com/fire833/morfic/pkg/apis/vpn"
	versioned "github.com/fire833/morfic/pkg/client/clientset/versioned"
	vpn "github.com/fire833/morfic/pkg/client/listers/apis/vpn"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// VPNTunnelInformer provides access to a shared informer and lister for
// VPNTunnels.
type VPNTunnelInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() vpn.VPNTunnelLister
}

type vPNTunnelInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewVPNTunnelInformer constructs a new informer for VPNTunnel type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewVPNTunnelInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredVPNTunnelInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredVPNTunnelInformer constructs a new informer for VPNTunnel type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredVPNTunnelInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.VpnVpn().VPNTunnels().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.VpnVpn().VPNTunnels().Watch(context.TODO(), options)
			},
		},
		&apisvpn.VPNTunnel{},
		resyncPeriod,
		indexers,
	)
}

func (f *vPNTunnelInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredVPNTunnelInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *vPNTunnelInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apisvpn.VPNTunnel{}, f.defaultInformer)
}

func (f *vPNTunnelInformer) Lister() vpn.VPNTunnelLister {
	return vpn.NewVPNTunnelLister(f.Informer().GetIndexer())
}
