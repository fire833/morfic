/*
*	Copyright (C) 2022  Kendall Tauser
*
*	This program is free software; you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by
*	the Free Software Foundation; either version 2 of the License, or
*	(at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License along
*	with this program; if not, write to the Free Software Foundation, Inc.,
*	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "github.com/fire833/morfic/pkg/client/clientset/internalversion"
	authenticationinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/authentication/internalversion"
	fakeauthenticationinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/authentication/internalversion/fake"
	certificatesinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/certificates/internalversion"
	fakecertificatesinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/certificates/internalversion/fake"
	dnsinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/dns/internalversion"
	fakednsinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/dns/internalversion/fake"
	firewallinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/firewall/internalversion"
	fakefirewallinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/firewall/internalversion/fake"
	netinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/net/internalversion"
	fakenetinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/net/internalversion/fake"
	servicesinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/services/internalversion"
	fakeservicesinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/services/internalversion/fake"
	vpninternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/vpn/internalversion"
	fakevpninternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/vpn/internalversion/fake"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var (
	_ clientset.Interface = &Clientset{}
	_ testing.FakeClient  = &Clientset{}
)

// Authentication retrieves the AuthenticationClient
func (c *Clientset) Authentication() authenticationinternalversion.AuthenticationInterface {
	return &fakeauthenticationinternalversion.FakeAuthentication{Fake: &c.Fake}
}

// Certificates retrieves the CertificatesClient
func (c *Clientset) Certificates() certificatesinternalversion.CertificatesInterface {
	return &fakecertificatesinternalversion.FakeCertificates{Fake: &c.Fake}
}

// Dns retrieves the DnsClient
func (c *Clientset) Dns() dnsinternalversion.DnsInterface {
	return &fakednsinternalversion.FakeDns{Fake: &c.Fake}
}

// Firewall retrieves the FirewallClient
func (c *Clientset) Firewall() firewallinternalversion.FirewallInterface {
	return &fakefirewallinternalversion.FakeFirewall{Fake: &c.Fake}
}

// Net retrieves the NetClient
func (c *Clientset) Net() netinternalversion.NetInterface {
	return &fakenetinternalversion.FakeNet{Fake: &c.Fake}
}

// Services retrieves the ServicesClient
func (c *Clientset) Services() servicesinternalversion.ServicesInterface {
	return &fakeservicesinternalversion.FakeServices{Fake: &c.Fake}
}

// Vpn retrieves the VpnClient
func (c *Clientset) Vpn() vpninternalversion.VpnInterface {
	return &fakevpninternalversion.FakeVpn{Fake: &c.Fake}
}
