/*
*	Copyright (C) 2022  Kendall Tauser
*
*	This program is free software; you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by
*	the Free Software Foundation; either version 2 of the License, or
*	(at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License along
*	with this program; if not, write to the Free Software Foundation, Inc.,
*	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	net "github.com/fire833/morfic/pkg/apis/net"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAddresses implements AddressInterface
type FakeAddresses struct {
	Fake *FakeNet
	ns   string
}

var addressesResource = schema.GroupVersionResource{Group: "net.morfic.io", Version: "", Resource: "addresses"}

var addressesKind = schema.GroupVersionKind{Group: "net.morfic.io", Version: "", Kind: "Address"}

// Get takes name of the address, and returns the corresponding address object, and an error if there is any.
func (c *FakeAddresses) Get(ctx context.Context, name string, options v1.GetOptions) (result *net.Address, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(addressesResource, c.ns, name), &net.Address{})

	if obj == nil {
		return nil, err
	}
	return obj.(*net.Address), err
}

// List takes label and field selectors, and returns the list of Addresses that match those selectors.
func (c *FakeAddresses) List(ctx context.Context, opts v1.ListOptions) (result *net.AddressList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(addressesResource, addressesKind, c.ns, opts), &net.AddressList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &net.AddressList{ListMeta: obj.(*net.AddressList).ListMeta}
	for _, item := range obj.(*net.AddressList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested addresses.
func (c *FakeAddresses) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(addressesResource, c.ns, opts))

}

// Create takes the representation of a address and creates it.  Returns the server's representation of the address, and an error, if there is any.
func (c *FakeAddresses) Create(ctx context.Context, address *net.Address, opts v1.CreateOptions) (result *net.Address, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(addressesResource, c.ns, address), &net.Address{})

	if obj == nil {
		return nil, err
	}
	return obj.(*net.Address), err
}

// Update takes the representation of a address and updates it. Returns the server's representation of the address, and an error, if there is any.
func (c *FakeAddresses) Update(ctx context.Context, address *net.Address, opts v1.UpdateOptions) (result *net.Address, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(addressesResource, c.ns, address), &net.Address{})

	if obj == nil {
		return nil, err
	}
	return obj.(*net.Address), err
}

// Delete takes name of the address and deletes it. Returns an error if one occurs.
func (c *FakeAddresses) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(addressesResource, c.ns, name, opts), &net.Address{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAddresses) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(addressesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &net.AddressList{})
	return err
}

// Patch applies the patch and returns the patched address.
func (c *FakeAddresses) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *net.Address, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(addressesResource, c.ns, name, pt, data, subresources...), &net.Address{})

	if obj == nil {
		return nil, err
	}
	return obj.(*net.Address), err
}
