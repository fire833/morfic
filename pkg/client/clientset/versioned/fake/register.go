/*
*	Copyright (C) 2022  Kendall Tauser
*
*	This program is free software; you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by
*	the Free Software Foundation; either version 2 of the License, or
*	(at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License along
*	with this program; if not, write to the Free Software Foundation, Inc.,
*	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	addressesv1alpha1 "github.com/fire833/morfic/pkg/apis/addresses/v1alpha1"
	authenticationv1alpha1 "github.com/fire833/morfic/pkg/apis/authentication/v1alpha1"
	certificatesv1alpha1 "github.com/fire833/morfic/pkg/apis/certificates/v1alpha1"
	configv1alpha1 "github.com/fire833/morfic/pkg/apis/config/v1alpha1"
	dnsv1alpha1 "github.com/fire833/morfic/pkg/apis/dns/v1alpha1"
	firewallv1alpha1 "github.com/fire833/morfic/pkg/apis/firewall/v1alpha1"
	interfacesv1alpha1 "github.com/fire833/morfic/pkg/apis/interfaces/v1alpha1"
	metricsv1alpha1 "github.com/fire833/morfic/pkg/apis/metrics/v1alpha1"
	natv1alpha1 "github.com/fire833/morfic/pkg/apis/nat/v1alpha1"
	neighborsv1alpha1 "github.com/fire833/morfic/pkg/apis/neighbors/v1alpha1"
	routesv1alpha1 "github.com/fire833/morfic/pkg/apis/routes/v1alpha1"
	servicesv1alpha1 "github.com/fire833/morfic/pkg/apis/services/v1alpha1"
	vpnv1alpha1 "github.com/fire833/morfic/pkg/apis/vpn/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	serializer "k8s.io/apimachinery/pkg/runtime/serializer"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
)

var scheme = runtime.NewScheme()
var codecs = serializer.NewCodecFactory(scheme)

var localSchemeBuilder = runtime.SchemeBuilder{
	addressesv1alpha1.AddToScheme,
	authenticationv1alpha1.AddToScheme,
	certificatesv1alpha1.AddToScheme,
	configv1alpha1.AddToScheme,
	dnsv1alpha1.AddToScheme,
	firewallv1alpha1.AddToScheme,
	interfacesv1alpha1.AddToScheme,
	metricsv1alpha1.AddToScheme,
	natv1alpha1.AddToScheme,
	neighborsv1alpha1.AddToScheme,
	routesv1alpha1.AddToScheme,
	servicesv1alpha1.AddToScheme,
	vpnv1alpha1.AddToScheme,
}

// AddToScheme adds all types of this clientset into the given scheme. This allows composition
// of clientsets, like in:
//
//   import (
//     "k8s.io/client-go/kubernetes"
//     clientsetscheme "k8s.io/client-go/kubernetes/scheme"
//     aggregatorclientsetscheme "k8s.io/kube-aggregator/pkg/client/clientset_generated/clientset/scheme"
//   )
//
//   kclientset, _ := kubernetes.NewForConfig(c)
//   _ = aggregatorclientsetscheme.AddToScheme(clientsetscheme.Scheme)
//
// After this, RawExtensions in Kubernetes types will serialize kube-aggregator types
// correctly.
var AddToScheme = localSchemeBuilder.AddToScheme

func init() {
	v1.AddToGroupVersion(scheme, schema.GroupVersion{Version: "v1"})
	utilruntime.Must(AddToScheme(scheme))
}
