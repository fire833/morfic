/*
*	Copyright (C) 2022  Kendall Tauser
*
*	This program is free software; you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by
*	the Free Software Foundation; either version 2 of the License, or
*	(at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License along
*	with this program; if not, write to the Free Software Foundation, Inc.,
*	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

// Code generated by client-gen. DO NOT EDIT.

package internalversion

import (
	"fmt"
	"net/http"

	addressesinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/addresses/internalversion"
	authenticationinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/authentication/internalversion"
	certificatesinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/certificates/internalversion"
	configinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/config/internalversion"
	dnsinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/dns/internalversion"
	firewallinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/firewall/internalversion"
	interfacesinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/interfaces/internalversion"
	metricsinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/metrics/internalversion"
	natinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/nat/internalversion"
	neighborsinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/neighbors/internalversion"
	routesinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/routes/internalversion"
	servicesinternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/services/internalversion"
	vpninternalversion "github.com/fire833/morfic/pkg/client/clientset/internalversion/typed/vpn/internalversion"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	Addresses() addressesinternalversion.AddressesInterface
	Authentication() authenticationinternalversion.AuthenticationInterface
	Certificates() certificatesinternalversion.CertificatesInterface
	Config() configinternalversion.ConfigInterface
	Dns() dnsinternalversion.DnsInterface
	Firewall() firewallinternalversion.FirewallInterface
	Interfaces() interfacesinternalversion.InterfacesInterface
	Metrics() metricsinternalversion.MetricsInterface
	Nat() natinternalversion.NatInterface
	Neighbors() neighborsinternalversion.NeighborsInterface
	Routes() routesinternalversion.RoutesInterface
	Services() servicesinternalversion.ServicesInterface
	Vpn() vpninternalversion.VpnInterface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	addresses      *addressesinternalversion.AddressesClient
	authentication *authenticationinternalversion.AuthenticationClient
	certificates   *certificatesinternalversion.CertificatesClient
	config         *configinternalversion.ConfigClient
	dns            *dnsinternalversion.DnsClient
	firewall       *firewallinternalversion.FirewallClient
	interfaces     *interfacesinternalversion.InterfacesClient
	metrics        *metricsinternalversion.MetricsClient
	nat            *natinternalversion.NatClient
	neighbors      *neighborsinternalversion.NeighborsClient
	routes         *routesinternalversion.RoutesClient
	services       *servicesinternalversion.ServicesClient
	vpn            *vpninternalversion.VpnClient
}

// Addresses retrieves the AddressesClient
func (c *Clientset) Addresses() addressesinternalversion.AddressesInterface {
	return c.addresses
}

// Authentication retrieves the AuthenticationClient
func (c *Clientset) Authentication() authenticationinternalversion.AuthenticationInterface {
	return c.authentication
}

// Certificates retrieves the CertificatesClient
func (c *Clientset) Certificates() certificatesinternalversion.CertificatesInterface {
	return c.certificates
}

// Config retrieves the ConfigClient
func (c *Clientset) Config() configinternalversion.ConfigInterface {
	return c.config
}

// Dns retrieves the DnsClient
func (c *Clientset) Dns() dnsinternalversion.DnsInterface {
	return c.dns
}

// Firewall retrieves the FirewallClient
func (c *Clientset) Firewall() firewallinternalversion.FirewallInterface {
	return c.firewall
}

// Interfaces retrieves the InterfacesClient
func (c *Clientset) Interfaces() interfacesinternalversion.InterfacesInterface {
	return c.interfaces
}

// Metrics retrieves the MetricsClient
func (c *Clientset) Metrics() metricsinternalversion.MetricsInterface {
	return c.metrics
}

// Nat retrieves the NatClient
func (c *Clientset) Nat() natinternalversion.NatInterface {
	return c.nat
}

// Neighbors retrieves the NeighborsClient
func (c *Clientset) Neighbors() neighborsinternalversion.NeighborsInterface {
	return c.neighbors
}

// Routes retrieves the RoutesClient
func (c *Clientset) Routes() routesinternalversion.RoutesInterface {
	return c.routes
}

// Services retrieves the ServicesClient
func (c *Clientset) Services() servicesinternalversion.ServicesInterface {
	return c.services
}

// Vpn retrieves the VpnClient
func (c *Clientset) Vpn() vpninternalversion.VpnInterface {
	return c.vpn
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c

	// share the transport between all clients
	httpClient, err := rest.HTTPClientFor(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	return NewForConfigAndClient(&configShallowCopy, httpClient)
}

// NewForConfigAndClient creates a new Clientset for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfigAndClient will generate a rate-limiter in configShallowCopy.
func NewForConfigAndClient(c *rest.Config, httpClient *http.Client) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}

	var cs Clientset
	var err error
	cs.addresses, err = addressesinternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.authentication, err = authenticationinternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.certificates, err = certificatesinternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.config, err = configinternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.dns, err = dnsinternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.firewall, err = firewallinternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.interfaces, err = interfacesinternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.metrics, err = metricsinternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.nat, err = natinternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.neighbors, err = neighborsinternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.routes, err = routesinternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.services, err = servicesinternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.vpn, err = vpninternalversion.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	cs, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.addresses = addressesinternalversion.New(c)
	cs.authentication = authenticationinternalversion.New(c)
	cs.certificates = certificatesinternalversion.New(c)
	cs.config = configinternalversion.New(c)
	cs.dns = dnsinternalversion.New(c)
	cs.firewall = firewallinternalversion.New(c)
	cs.interfaces = interfacesinternalversion.New(c)
	cs.metrics = metricsinternalversion.New(c)
	cs.nat = natinternalversion.New(c)
	cs.neighbors = neighborsinternalversion.New(c)
	cs.routes = routesinternalversion.New(c)
	cs.services = servicesinternalversion.New(c)
	cs.vpn = vpninternalversion.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
