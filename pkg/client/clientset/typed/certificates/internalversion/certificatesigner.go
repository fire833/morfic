/*
*	Copyright (C) 2022  Kendall Tauser
*
*	This program is free software; you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by
*	the Free Software Foundation; either version 2 of the License, or
*	(at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License along
*	with this program; if not, write to the Free Software Foundation, Inc.,
*	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

// Code generated by client-gen. DO NOT EDIT.

package internalversion

import (
	"context"
	"time"

	certificates "github.com/fire833/morfic/pkg/apis/certificates"
	scheme "github.com/fire833/morfic/pkg/client/clientset/internalversion/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// CertificateSignersGetter has a method to return a CertificateSignerInterface.
// A group's client should implement this interface.
type CertificateSignersGetter interface {
	CertificateSigners(namespace string) CertificateSignerInterface
}

// CertificateSignerInterface has methods to work with CertificateSigner resources.
type CertificateSignerInterface interface {
	Create(ctx context.Context, certificateSigner *certificates.CertificateSigner, opts v1.CreateOptions) (*certificates.CertificateSigner, error)
	Update(ctx context.Context, certificateSigner *certificates.CertificateSigner, opts v1.UpdateOptions) (*certificates.CertificateSigner, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*certificates.CertificateSigner, error)
	List(ctx context.Context, opts v1.ListOptions) (*certificates.CertificateSignerList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *certificates.CertificateSigner, err error)
	CertificateSignerExpansion
}

// certificateSigners implements CertificateSignerInterface
type certificateSigners struct {
	client rest.Interface
	ns     string
}

// newCertificateSigners returns a CertificateSigners
func newCertificateSigners(c *CertificatesClient, namespace string) *certificateSigners {
	return &certificateSigners{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the certificateSigner, and returns the corresponding certificateSigner object, and an error if there is any.
func (c *certificateSigners) Get(ctx context.Context, name string, options v1.GetOptions) (result *certificates.CertificateSigner, err error) {
	result = &certificates.CertificateSigner{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("certificatesigners").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of CertificateSigners that match those selectors.
func (c *certificateSigners) List(ctx context.Context, opts v1.ListOptions) (result *certificates.CertificateSignerList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &certificates.CertificateSignerList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("certificatesigners").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested certificateSigners.
func (c *certificateSigners) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("certificatesigners").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a certificateSigner and creates it.  Returns the server's representation of the certificateSigner, and an error, if there is any.
func (c *certificateSigners) Create(ctx context.Context, certificateSigner *certificates.CertificateSigner, opts v1.CreateOptions) (result *certificates.CertificateSigner, err error) {
	result = &certificates.CertificateSigner{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("certificatesigners").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(certificateSigner).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a certificateSigner and updates it. Returns the server's representation of the certificateSigner, and an error, if there is any.
func (c *certificateSigners) Update(ctx context.Context, certificateSigner *certificates.CertificateSigner, opts v1.UpdateOptions) (result *certificates.CertificateSigner, err error) {
	result = &certificates.CertificateSigner{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("certificatesigners").
		Name(certificateSigner.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(certificateSigner).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the certificateSigner and deletes it. Returns an error if one occurs.
func (c *certificateSigners) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("certificatesigners").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *certificateSigners) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("certificatesigners").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched certificateSigner.
func (c *certificateSigners) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *certificates.CertificateSigner, err error) {
	result = &certificates.CertificateSigner{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("certificatesigners").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
