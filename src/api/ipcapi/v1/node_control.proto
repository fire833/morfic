/*
*	Copyright (C) 2021  Kendall Tauser
*
*	This program is free software; you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by
*	the Free Software Foundation; either version 2 of the License, or
*	(at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License along
*	with this program; if not, write to the Free Software Foundation, Inc.,
*	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

syntax = "proto3";
package v1;

service NodeControllerService {

    rpc CreateInterface(CreateInterfaceRequest) returns (CreateInterfaceResponse) {}

    rpc UpdateInterface(UpdateInterfaceRequest) returns (UpdateInterfaceResponse) {}

    rpc DeleteInterface(DeleteInterfaceRequest) returns (DeleteInterfaceResponse) {}

    rpc GetInterface(GetInterfaceRequest) returns (GetInterfaceResponse) {}

    rpc GetAllInterfaces(GetAllInterfacesRequest) returns (GetAllInterfacesResponse) {}

    rpc CreateStaticRoute(CreateStaticRouteRequest) returns (CreateStaticRouteResponse) {}

    rpc DeleteStaticRoute(DeleteStaticRouteRequest) returns (DeleteStaticRouteResponse) {}

    rpc GetRoute(GetRouteRequest) returns (GetRouteResponse) {}

    rpc GetAllRoutes(GetAllRoutesRequest) returns (GetAllRoutesResponse) {}

}

message CreateInterfaceRequest {

}

message CreateInterfaceResponse {

}

message UpdateInterfaceRequest {

}

message UpdateInterfaceResponse {

}

message DeleteInterfaceRequest {

}

message DeleteInterfaceResponse {

}

message GetInterfaceRequest {
    // Specify the elements that you want to sort by.
    map<string, string> filter_elems = 1;
    // Specify the maximum number of interfaces that you want back.
    int32 max_routes = 2;
}

message GetInterfaceResponse {
    // Return the response status for this RPC call.
    int32 status_code = 1;
    // Error string if there was any getting kernel interfaces.
    string error = 2;
    // Returns the interface objects that are on the host.
    repeated Interface routes = 3; 
}

message GetAllInterfacesRequest {}

message GetAllInterfacesResponse {
    // Return the response status for this RPC call.
    int32 status_code = 1;
    // Error string if there was any getting kernel interfaces.
    string error = 2;
    // Returns the interface objects that are on the host.
    Interface routes = 3; 
}

message Interface {
    // Describes the interface address for this interface.
    string name = 1;
    string addressv4 = 2;
    string gatewayv4 = 3;
    string addressv6 = 4;
    string gatewayv6 = 5;

}

message GetRouteRequest {
    // Specify the elements that you want to sort by.
    map<string, string> filter_elems = 1;
    // Specify the maximum number of routes that you want back.
    int32 max_routes = 2;
}

message GetRouteResponse {
    // Return the response status for this RPC call.
    int32 status_code = 1;
    // Error string if there was any getting kernel routes.
    string error = 2;
    // Returns the route objects that are on the host.
    Route routes = 3; 
}

message GetAllRoutesRequest {}

message GetAllRoutesResponse {
    // Return the response status for this RPC call.
    int32 status_code = 1;
    // Error string if there was any getting kernel routes.
    string error = 2;
    // Returns the route objects that are on the host.
    Route routes = 3; 
}

message CreateStaticRouteRequest {

}

message CreateStaticRouteResponse {

}

message DeleteStaticRouteRequest {

}

message DeleteStaticRouteResponse {
    // Response code for this RPC call.
    int32 status_code = 1;
    // Error if there is any with updating this route schema.
    string error = 2;
    // Returns the route struct that was removed from the kernel.
    Route ret_route = 3;
}

message UpdateStaticRouteRequest {

}

message UpdateStaticRouteResponse {
    // Response code for this RPC call.
    int32 status_code = 1;
    // Error if there is any with updating this route schema.
    string error = 2;
}

// Describes a route object to be managed with this service.
message Route {
    // Describes the destination range for the route.
    string destination = 1;
    // Gateway IP address for this route.
    string gateway = 2;
    // netmask for route - need to look for destination or gateway.
    string mask = 3;
    // Cost metric for this route.
    int32 metric = 4;
    // Name of outbound interface for routes.
    string interface = 5;
}
